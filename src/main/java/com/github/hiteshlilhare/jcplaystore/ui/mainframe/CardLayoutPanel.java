/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.hiteshlilhare.jcplaystore.ui.mainframe;

import com.github.hiteshlilhare.jcplaystore.jcbeans.AppReleaseDetails;
import com.github.hiteshlilhare.jcplaystore.jcbeans.CardAppDetail;
import com.github.hiteshlilhare.jcplaystore.jcbeans.JavaCardReaderBean;
import com.github.hiteshlilhare.jcplaystore.ui.mainframe.listener.CardLayoutSelectionChangeListener;
import com.github.hiteshlilhare.jcplaystore.ui.util.LocalRepositoryMonitorTimerTask;
import com.github.hiteshlilhare.jcplaystore.ui.util.ReleaseMonitorTimerTask;
import java.awt.BasicStroke;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

/**
 *
 * @author Hitesh
 */
public class CardLayoutPanel extends javax.swing.JPanel {

    public static final String APP_CARTS = "APP_CARTS";
    public static final String APP_DETAILS = "APP_DETAILS";

    /**
     * Creates new form CardLayoutPanel
     */
    public CardLayoutPanel() {
        initComponents();
        initialize();
    }

    private void initialize() {
        Dimension panelDim = new Dimension(1050, 840);
        setSize(panelDim);
        setPreferredSize(panelDim);
        final CardLayout panelLayout = new CardLayout(0, 0);
        setLayout(panelLayout);
        appCartsPanel = new AppCartsPanel();
        //Release monitor.
        ReleaseMonitorTimerTask.getInstance()
                .setRemoteRepositoryListener(appCartsPanel);
        //Local app store monitor.
        LocalRepositoryMonitorTimerTask.getInstance()
                .setLocalRepositoryListener(appCartsPanel);

        appDetailsPanel = new AppDetailsPanel();

        add(APP_CARTS, appCartsPanel);
        add(APP_DETAILS, appDetailsPanel);
        appCartsPanel.setCardLayoutSelectionChangeListener(
                new CardLayoutSelectionChangeListener() {
            @Override
            public void selectCard(String cardName,
                    CardAppDetail cardAppDetail) {
                appDetailsPanel.setCardAppDetail(cardAppDetail);
                panelLayout.show(CardLayoutPanel.this, cardName);
            }

            @Override
            public void selectCard(String cardName) {
            }

            @Override
            public void selectCard(String cardName,
                    AppReleaseDetails appReleaseDetails) {
                appDetailsPanel.setAppReleaseDetails(appReleaseDetails);
                panelLayout.show(CardLayoutPanel.this, cardName);
            }
        });
        appDetailsPanel.setCardLayoutSelectionChangeListener(
                new CardLayoutSelectionChangeListener() {
            @Override
            public void selectCard(String cardName, CardAppDetail cardAppDetail) {
            }

            @Override
            public void selectCard(String cardName) {
                panelLayout.show(CardLayoutPanel.this, cardName);
            }

            @Override
            public void selectCard(String cardName, AppReleaseDetails appReleaseDetails) {
            }
        });

    }

    public void showNoReaderPanle() {
        appCartsPanel.showNoReaderPanle();
    }

    //This method will be called by ReaderNodeSelectionListener updateUI method.
    public void updateAppCartsPanel(JavaCardReaderBean javaCardReaderBean) {
        appCartsPanel.updateInstalledAppCart(javaCardReaderBean);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private AppCartsPanel appCartsPanel;
    private AppDetailsPanel appDetailsPanel;
    /**
     * Stroke size. it is recommended to set it to 1 for better view
     */
    protected int strokeSize = 1;
    /**
     * Color of shadow
     */
    protected Color shadowColor = Color.black;
    /**
     * Sets if it drops shadow
     */
    protected boolean shady = true;
    /**
     * Sets if it has an High Quality view
     */
    protected boolean highQuality = true;
    /**
     * Double values for Horizontal and Vertical radius of corner arcs
     */
    //protected Dimension arcs = new Dimension(0, 0);
    protected Dimension arcs = new Dimension(20, 20);//creates curved borders and panel
    /**
     * Distance between shadow border and opaque panel border
     */
    protected int shadowGap = 10;
    /**
     * The offset of shadow.
     */
    protected int shadowOffset = 4;
    /**
     * The transparency value of shadow. ( 0 - 255)
     */
    protected int shadowAlpha = 150;
    int width = 173, height = 210;

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Color shadowColorA = new Color(shadowColor.getRed(),
                shadowColor.getGreen(), shadowColor.getBlue(), shadowAlpha);
        Graphics2D graphics = (Graphics2D) g;

        //Sets antialiasing if HQ.
        if (highQuality) {
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
        }

        //Draws shadow borders if any.
        if (shady) {
            graphics.setColor(shadowColorA);
            graphics.fillRoundRect(
                    shadowOffset,// X position
                    shadowOffset,// Y position
                    width - strokeSize - shadowOffset, // width
                    height - strokeSize - shadowOffset, // height
                    arcs.width, arcs.height);// arc Dimension
        } else {
            shadowGap = 1;
        }

        //Draws the rounded opaque panel with borders.
        graphics.setColor(getBackground());
        graphics.fillRoundRect(0, 0, width - shadowGap,
                height - shadowGap, arcs.width, arcs.height);
        graphics.setColor(getForeground());
        graphics.setStroke(new BasicStroke(strokeSize));
        graphics.drawRoundRect(0, 0, width - shadowGap,
                height - shadowGap, arcs.width, arcs.height);

        //Sets strokes to default, is better.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
